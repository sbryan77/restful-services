/* ****************************************************************************
 * File:             $Source: /SoftwareDev/WildBlue/InternalWebService/Configuration/core/src/main/java/com/viasat/wildblue/internalwebservice/configuration/ConfigurationServiceV10Impl.java,v $
 * Revision:         $Revision: 1.19 $
 * Last Modified By: $Author: VIASAT\lchapman $
 * Last Modified On: $Date: 2014/08/20 23:06:36 $
 *
 * ------------------------------------------------------------------
 *  Copyright (c) 2004-2010 WildBlue Communications. All rights reserved.
 * ------------------------------------------------------------------
 *
 * **************************************************************************** */

/**
 * This class implements the ConfigurationServiceV10 interface for both simulated and
 * actual deployments.  For the simulation, a simulated DAO is injected in place of the
 * database-target one.
 */

package com.viasat.wildblue.internalwebservice.configuration;

import java.io.IOException;
import java.util.List;

import javax.servlet.ServletContext;
import javax.xml.parsers.ParserConfigurationException;
import javax.xml.transform.TransformerException;
import javax.xml.xpath.XPathExpressionException;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.web.context.ServletContextAware;
import org.w3c.dom.Node;
import org.xml.sax.SAXException;

import com.viasat.wildblue.common.exception.ExceptionDetail;
import com.viasat.wildblue.common.exception.ExceptionUtilities;
import com.viasat.wildblue.common.exception.WebServiceException;
import com.viasat.wildblue.common.header.WildBlueHeader;
import com.viasat.wildblue.internalwebservice.configuration.data.ConfigurationItem;
import com.viasat.wildblue.internalwebservice.configuration.servlet.XMLUtilities;

@javax.jws.WebService(serviceName = "ConfigurationService", portName = "ConfigurationServiceEndpoint_v1.0", targetNamespace = "http://www.wildblue.viasat.com/WSDL/v1.0/ConfigurationWebService", wsdlLocation = "wsdl/ConfigurationService.wsdl", endpointInterface = "com.viasat.wildblue.internalwebservice.configuration.ConfigurationServiceV10")
/**
 * Implementation of the Configuration service.  This class delegates its functionality to the
 * ConfigurationServiceV10Processor.  All exceptions generated by the Configuration service are caught here.
 * The details of the exception are added to the ExceptionDetail in the WebServiceException SOAP Fault.
 *
 * @see ConfigurationServiceV10Processor
 */
public class ConfigurationServiceV10Impl implements ConfigurationServiceV10, ServletContextAware
{
	/** Logger * */
	private static final Logger LOGGER = LoggerFactory.getLogger(ConfigurationServiceV10Impl.class);

	/** Injected Configuration service processor * */
	private ConfigurationServiceV10Processor m_configServiceProcessor;

	/** Servlet context used to provide context information for faults * */
	private ServletContext m_servletContext;

	@Override
	public void deleteConfigurationDocument(String documentName, WildBlueHeader wildBlueHeader)
			throws WebServiceException
	{
		String detail = "Document name:" + documentName;

		try
		{
			m_configServiceProcessor.deleteConfigurationDocument(documentName);
		}
		catch (UpdateFailedException e)
		{
			throw buildWebServiceException(ConfigConstants.UPDATE_FAILED, detail, e);
		}
		catch (DocumentNotFoundException e)
		{
			throw buildWebServiceException(ConfigConstants.DOCUMENT_NOT_FOUND, detail, e);
		}
		catch (RuntimeException ex)
		{
			throw buildWebServiceException(ConfigConstants.INTERNAL_ERROR, detail, ex);
		}
	}

	/**
	 * Fetches all properties for a given document name.
	 * 
	 * @param documentName
	 *            Document name to process, in upper case.Usually the
	 *            application name.
	 * @param wildBlueHeader
	 *            Standard header.
	 * 
	 * @return List of all configuration properties.
	 * 
	 * @throws WebServiceException
	 *             If any exception occurs during processing.
	 */
	@Override
	public List<ConfigurationItem> getCompleteConfiguration(final String documentName,
			final WildBlueHeader wildBlueHeader) throws WebServiceException
	{
		LOGGER.trace("getCompleteConfiguration(" + documentName + ")");

		String detail = "Document name:" + documentName;

		List<ConfigurationItem> itemList;

		try
		{
			itemList = m_configServiceProcessor.getCompleteConfiguration(documentName);
		}
		catch (DocumentNotFoundException ex)
		{
			throw buildWebServiceException(ConfigConstants.DOCUMENT_NOT_FOUND, detail, ex);
		}
		catch (RuntimeException ex)
		{
			throw buildWebServiceException(ConfigConstants.INTERNAL_ERROR, detail, ex);
		}

		return itemList;
	}

	@Override
	public String getConfigurationDocument(String documentName, WildBlueHeader wildBlueHeader)
			throws WebServiceException
	{
		String detail = "Document name:" + documentName;

		try
		{
			String xml = m_configServiceProcessor.getConfigurationDocument(documentName);

			try
			{
				xml = stripWhitespace(xml);
			}
			catch (XPathExpressionException e)
			{
				LOGGER.error("Error stripping empty text nodes from response xml ", e);
			}
			catch (SAXException e)
			{
				LOGGER.error("Error stripping empty text nodes from response xml ", e);
			}
			catch (IOException e)
			{
				LOGGER.error("Error stripping empty text nodes from response xml ", e);
			}
			catch (ParserConfigurationException e)
			{
				LOGGER.error("Error stripping empty text nodes from response xml ", e);
			}
			catch (TransformerException e)
			{
				LOGGER.error("Error stripping empty text nodes from response xml ", e);
			}

			return xml;
		}
		catch (DocumentNotFoundException e)
		{
			throw buildWebServiceException(ConfigConstants.DOCUMENT_NOT_FOUND, detail, e);
		}
		catch (RuntimeException ex)
		{
			throw buildWebServiceException(ConfigConstants.INTERNAL_ERROR, detail, ex);
		}
	}

	/**
	 * Fetches a single configuration item.
	 * 
	 * @param documentName
	 *            Document name to process, in upper case.Usually the
	 *            application name.
	 * @param key
	 *            Name of the property to fetch.
	 * @param wildBlueHeader
	 *            Standard header.
	 * 
	 * @return The string value of the named property.
	 * 
	 * @throws WebServiceException
	 *             If any exception occurs during processing.
	 */
	@Override
	public String getConfigurationItem(final String documentName, final String key,
			final WildBlueHeader wildBlueHeader) throws WebServiceException
	{
		LOGGER.trace("getConfigurationItem(" + documentName + ", " + key + ")");

		String detail = "Document name:" + documentName + ", Key:" + key;

		String value;

		try
		{
			value = m_configServiceProcessor.getConfigurationItem(documentName, key);
		}
		catch (DocumentNotFoundException ex)
		{
			throw buildWebServiceException(ConfigConstants.DOCUMENT_NOT_FOUND, detail, ex);
		}
		catch (PropertyNotFoundException ex)
		{
			throw buildWebServiceException(ConfigConstants.PROPERTY_NOT_FOUND, detail, ex);
		}
		catch (RuntimeException ex)
		{
			throw buildWebServiceException(ConfigConstants.INTERNAL_ERROR, detail, ex);
		}

		return value;
	}

	/**
	 * Fetches a single configuration item, or returns a provided default value,
	 * if not found.
	 * 
	 * @param documentName
	 *            Document name to process, in upper case.Usually the
	 *            application name.
	 * @param key
	 *            Name of property to fetch.
	 * @param defaultString
	 *            Default value if property is not found.
	 * @param wildBlueHeader
	 *            Standard header.
	 * 
	 * @return The string value of the named property or the default value.
	 * 
	 * @throws WebServiceException
	 *             Should never happen, as default will be returned in all error
	 *             situations.
	 */
	@Override
	public String getConfigurationItemDefault(final String documentName, final String key,
			final String defaultString, final WildBlueHeader wildBlueHeader)
			throws WebServiceException
	{
		LOGGER.trace("getConfigurationItemDefault(" + documentName + ", " + key + ", "
				+ defaultString + ")");

		String value;

		try
		{
			value = m_configServiceProcessor.getConfigurationItem(documentName, key);
		}
		catch (PropertyNotFoundException e)
		{
			value = defaultString;
		}
		catch (DocumentNotFoundException e)
		{
			value = defaultString;
		}
		catch (RuntimeException ex)
		{
			value = defaultString;
		}

		return value;
	}

	/**
	 * Fetches a single configuration item, and returns it as a Double value.
	 * 
	 * @param documentName
	 *            Document name to process, in upper case.
	 * @param key
	 *            Name of property to fetch.
	 * @param wildBlueHeader
	 *            Standard header.
	 * 
	 * @return The Double value of the named property.
	 * 
	 * @throws WebServiceException
	 *             If any exception occurs during processing.
	 */
	@Override
	public Double getConfigurationItemDouble(final String documentName, final String key,
			final WildBlueHeader wildBlueHeader) throws WebServiceException
	{
		LOGGER.trace("getConfigurationItemDouble(" + documentName + ", " + key + ")");

		String detail = "Document name:" + documentName + ", Key:" + key;

		Double doubleValue;

		try
		{
			doubleValue = m_configServiceProcessor.getConfigurationItemDouble(documentName, key);
		}
		catch (DocumentNotFoundException ex)
		{
			throw buildWebServiceException(ConfigConstants.DOCUMENT_NOT_FOUND, detail, ex);
		}
		catch (PropertyNotFoundException ex)
		{
			throw buildWebServiceException(ConfigConstants.PROPERTY_NOT_FOUND, detail, ex);
		}
		catch (RuntimeException ex)
		{
			throw buildWebServiceException(ConfigConstants.INTERNAL_ERROR, detail, ex);
		}

		return doubleValue;
	}

	/**
	 * Fetches a single configuration item, and returns it as a Double value.
	 * The default value will be returned if the item is not found.
	 * 
	 * @param documentName
	 *            Document name to process, in upper case.
	 * @param key
	 *            Name of property to fetch.
	 * @param defaultDouble
	 *            Default value if property is not found.
	 * @param wildBlueHeader
	 *            Standard header.
	 * 
	 * @return The Double value of the named property.
	 * 
	 * @throws WebServiceException
	 *             Should never happen, as default will be returned in all error
	 *             situations.
	 */
	@Override
	public Double getConfigurationItemDoubleDefault(final String documentName, final String key,
			final Double defaultDouble, final WildBlueHeader wildBlueHeader)
			throws WebServiceException
	{
		LOGGER.trace("getConfigurationItemDoubleDefault(" + documentName + ", " + key + ", "
				+ defaultDouble + ")");

		Double doubleValue;

		try
		{
			doubleValue = m_configServiceProcessor.getConfigurationItemDouble(documentName, key);
		}
		catch (DocumentNotFoundException ex)
		{
			doubleValue = defaultDouble;
		}
		catch (PropertyNotFoundException ex)
		{
			doubleValue = defaultDouble;
		}
		catch (RuntimeException ex)
		{
			doubleValue = defaultDouble;
		}

		return doubleValue;
	}

	/**
	 * Fetches a single configuration item, and returns it as an Integer value.
	 * 
	 * @param documentName
	 *            Document name to process, in upper case.
	 * @param key
	 *            Name of property to fetch.
	 * @param wildBlueHeader
	 *            Standard header.
	 * 
	 * @return The Integer value of the named property.
	 * 
	 * @throws WebServiceException
	 *             If any exception occurs during processing.
	 */
	@Override
	public Integer getConfigurationItemInt(final String documentName, final String key,
			final WildBlueHeader wildBlueHeader) throws WebServiceException
	{
		LOGGER.trace("getConfigurationItemInt(" + documentName + ", " + key + ")");

		String detail = "Document name:" + documentName + ", Key:" + key;

		Integer intValue;

		try
		{
			intValue = m_configServiceProcessor.getConfigurationItemInt(documentName, key);
		}
		catch (DocumentNotFoundException ex)
		{
			throw buildWebServiceException(ConfigConstants.DOCUMENT_NOT_FOUND, detail, ex);
		}
		catch (PropertyNotFoundException ex)
		{
			throw buildWebServiceException(ConfigConstants.PROPERTY_NOT_FOUND, detail, ex);
		}
		catch (RuntimeException ex)
		{
			throw buildWebServiceException(ConfigConstants.INTERNAL_ERROR, detail, ex);
		}

		return intValue;
	}

	/**
	 * Fetches a single configuration item, and returns it as an Integer value.
	 * The default value will be returned if the item is not found.
	 * 
	 * @param documentName
	 *            Document name to process, in upper case.
	 * @param key
	 *            Name of property to fetch.
	 * @param defaultInt
	 *            Default value if property is not found.
	 * @param wildBlueHeader
	 *            Standard header.
	 * 
	 * @return The Integer value of the named property.
	 * 
	 * @throws WebServiceException
	 *             Should never happen, as default will be returned in all error
	 *             situations.
	 */
	@Override
	public Integer getConfigurationItemIntDefault(final String documentName, final String key,
			final Integer defaultInt, final WildBlueHeader wildBlueHeader)
			throws WebServiceException
	{
		LOGGER.trace("getConfigurationItemIntDefault(" + documentName + ", " + key + ", "
				+ defaultInt + ")");

		Integer intValue;

		try
		{
			intValue = m_configServiceProcessor.getConfigurationItemInt(documentName, key);
		}
		catch (PropertyNotFoundException e)
		{
			intValue = defaultInt;
		}
		catch (DocumentNotFoundException e)
		{
			intValue = defaultInt;
		}
		catch (RuntimeException ex)
		{
			intValue = defaultInt;
		}

		return intValue;
	}

	/**
	 * Fetches a list of property values for a single key.
	 * 
	 * @param documentName
	 *            Document name to process, in upper case.
	 * @param key
	 *            Property name to process.
	 * @param wildBlueHeader
	 *            Standard header.
	 * 
	 * @return List of configuration items for property name provided.
	 * 
	 * @throws WebServiceException
	 *             If any exception occurs during processing.
	 */
	@Override
	public List<ConfigurationItem> getConfigurationItemList(String documentName, String key,
			final WildBlueHeader wildBlueHeader) throws WebServiceException
	{
		LOGGER.trace("getConfigurationItemList(" + documentName + ", " + key + ")");

		String detail = "Document name:" + documentName;

		List<ConfigurationItem> items;

		try
		{
			items = m_configServiceProcessor.getConfigurationItemList(documentName, key);
		}
		catch (DocumentNotFoundException ex)
		{
			throw buildWebServiceException(ConfigConstants.DOCUMENT_NOT_FOUND, detail, ex);
		}
		catch (RuntimeException ex)
		{
			throw buildWebServiceException(ConfigConstants.INTERNAL_ERROR, detail, ex);
		}

		return items;
	}

	/**
	 * Fetches a list of property values for a list of keys.
	 * 
	 * @param documentName
	 *            Document name to process, in upper case.
	 * @param keys
	 *            List of property names to process.
	 * @param wildBlueHeader
	 *            Standard header.
	 * 
	 * @return List of configuration items to match property names provided.
	 * 
	 * @throws WebServiceException
	 *             If any exception occurs during processing.
	 */
	@Override
	public List<ConfigurationItem> getConfigurationItems(final String documentName,
			final List<String> keys, final WildBlueHeader wildBlueHeader)
			throws WebServiceException
	{
		LOGGER.trace("getConfigurationItems(" + documentName + ")");

		String detail = "Document name:" + documentName;

		List<ConfigurationItem> items;

		try
		{
			items = m_configServiceProcessor.getConfigurationItems(documentName, keys);
		}
		catch (DocumentNotFoundException ex)
		{
			throw buildWebServiceException(ConfigConstants.DOCUMENT_NOT_FOUND, detail, ex);
		}
		catch (RuntimeException ex)
		{
			throw buildWebServiceException(ConfigConstants.INTERNAL_ERROR, detail, ex);
		}

		return items;
	}

	@Override
	public List<String> getDocumentNames(WildBlueHeader wildBlueHeader) throws WebServiceException
	{
		try
		{
			return m_configServiceProcessor.getDocumentNames();
		}
		catch (QueryFailedException e)
		{
			throw buildWebServiceException(ConfigConstants.QUERY_FAILED, "", e);
		}
		catch (RuntimeException ex)
		{
			throw buildWebServiceException(ConfigConstants.INTERNAL_ERROR, "", ex);
		}
	}

	@Override
	public void replaceConfigurationDocument(String documentName, String xml,
			WildBlueHeader wildBlueHeader) throws WebServiceException
	{
		String detail = "Document name:" + documentName;

		try
		{
			m_configServiceProcessor.replaceConfigurationDocument(documentName, xml);
		}
		catch (UpdateFailedException e)
		{
			throw buildWebServiceException(ConfigConstants.UPDATE_FAILED, detail, e);
		}
		catch (DocumentNotFoundException e)
		{
			throw buildWebServiceException(ConfigConstants.DOCUMENT_NOT_FOUND, detail, e);
		}
		catch (RuntimeException ex)
		{
			throw buildWebServiceException(ConfigConstants.INTERNAL_ERROR, detail, ex);
		}
	}

	// Mutators for Spring Dependency Injection
	// ========================================

	public void setConfigServiceProcessor(
			final ConfigurationServiceV10Processor configServiceProcessor)
	{
		this.m_configServiceProcessor = configServiceProcessor;
	}

	public void setServletContext(final ServletContext servletContext)
	{
		m_servletContext = servletContext;
	}

	// =================================================================================

	/**
	 * Creates a WebServiceException to contain ExceptionDetails.
	 * 
	 * @param msg
	 *            The message for the WebServiceException
	 * @param detail
	 *            A string containing supporting detail for the error.
	 * @param ex
	 *            The exception that was the cause.
	 * 
	 * @return Fully constructed WebServiceException
	 */
	private WebServiceException buildWebServiceException(final String msg, final String detail,
			final Exception ex)
	{
		ExceptionDetail exceptionDetail = ExceptionUtilities.buildExceptionDetail(detail, ex,
				m_servletContext);
		WebServiceException wse = new WebServiceException(msg, exceptionDetail, ex);
		return wse;
	}

	private String stripWhitespace(String xml) throws SAXException, IOException,
			ParserConfigurationException, XPathExpressionException, TransformerException
	{
		Node node = XMLUtilities.loadXMLFrom(xml);
		node = XMLUtilities.stripWhitespace(node);

		return XMLUtilities.nodeToString(node);
	}
}
