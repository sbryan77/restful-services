/* ****************************************************************************
 * File:             $Source: /SoftwareDev/WildBlue/InternalWebService/Configuration/core/src/main/java/com/viasat/wildblue/internalwebservice/configuration/servlet/XMLUtilities.java,v $
 * Revision:         $Revision: 1.1 $
 * Last Modified By: $Author: VIASAT\jkent $
 * Last Modified On: $Date: 2013/05/24 21:42:30 $
 *
 * ------------------------------------------------------------------
 *  Copyright (c) 2004-2010 WildBlue Communications. All rights reserved.
 * ------------------------------------------------------------------
 *
 * **************************************************************************** */


package com.viasat.wildblue.internalwebservice.configuration.servlet;

import org.w3c.dom.Document;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;

import org.xml.sax.SAXException;

import java.io.ByteArrayInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.StringWriter;

import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;
import javax.xml.transform.OutputKeys;
import javax.xml.transform.Transformer;
import javax.xml.transform.TransformerException;
import javax.xml.transform.TransformerFactory;
import javax.xml.transform.dom.DOMSource;
import javax.xml.transform.stream.StreamResult;
import javax.xml.xpath.XPathConstants;
import javax.xml.xpath.XPathExpressionException;
import javax.xml.xpath.XPathFactory;


public class XMLUtilities
{
    /**
     * Reads XML from an input stream and creates a DOM Document.
     *
     * @param   is  Input stream.
     *
     * @return  Configuration XML as a Document.
     *
     * @throws  SAXException
     * @throws  IOException
     * @throws  ParserConfigurationException
     */
    public static Document loadXMLFrom(InputStream is) throws SAXException,
        IOException, ParserConfigurationException
    {
        Document doc;
        DocumentBuilder builder;

        DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
        factory.setNamespaceAware(true);

        builder = factory.newDocumentBuilder();
        doc = builder.parse(is);
        is.close();

        return doc;
    }

    public static Document loadXMLFrom(String xml) throws SAXException,
        IOException, ParserConfigurationException
    {
        InputStream istrm = new ByteArrayInputStream(xml.getBytes());

        return loadXMLFrom(istrm);
    }

    public static String nodeToString(Node node) throws TransformerException
    {
        StringWriter sw = new StringWriter();

        Transformer t = TransformerFactory.newInstance().newTransformer();
        // The xml declaration is omitted and then readded for backwards
        // compatibility. The xml declaration generated by the transformer is
        // <?xml version='1.0' encoding='UTF-8' standalone='no'?>
        t.setOutputProperty(OutputKeys.OMIT_XML_DECLARATION, "yes");
        t.setOutputProperty(OutputKeys.INDENT, "no");

        t.transform(new DOMSource(node), new StreamResult(sw));

        return "<?xml version='1.0' encoding='UTF-8'?>" + sw.toString();
    }

    public static Node stripWhitespace(Node node)
        throws XPathExpressionException
    {
        XPathFactory xpathFactory = XPathFactory.newInstance();
        // XPath to find empty text nodes.
        javax.xml.xpath.XPathExpression xpathExp = xpathFactory.newXPath()
            .compile("//text()[normalize-space(.) = '']");
        NodeList emptyTextNodes = (NodeList)xpathExp.evaluate(node,
                XPathConstants.NODESET);

        // Remove each empty text node from document.
        for (int i = 0; i < emptyTextNodes.getLength(); i++)
        {
            Node emptyTextNode = emptyTextNodes.item(i);
            emptyTextNode.getParentNode().removeChild(emptyTextNode);
        }

        return node;
    }
}
