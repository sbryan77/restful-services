//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, vhudson-jaxb-ri-2.1-2 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2018.12.25 at 01:06:37 PM MST 
//


package com.viasat.wildblue.common.commondata;

import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlType;
import org.jvnet.jaxb2_commons.lang.CopyStrategy;
import org.jvnet.jaxb2_commons.lang.CopyTo;
import org.jvnet.jaxb2_commons.lang.Equals;
import org.jvnet.jaxb2_commons.lang.EqualsStrategy;
import org.jvnet.jaxb2_commons.lang.HashCode;
import org.jvnet.jaxb2_commons.lang.HashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBCopyStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBEqualsStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBHashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBToStringStrategy;
import org.jvnet.jaxb2_commons.lang.ToString;
import org.jvnet.jaxb2_commons.lang.ToStringStrategy;
import org.jvnet.jaxb2_commons.locator.ObjectLocator;
import org.jvnet.jaxb2_commons.locator.util.LocatorUtils;


/**
 * <p>Java class for BeamSalesInfo complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="BeamSalesInfo">
 *   &lt;complexContent>
 *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
 *       &lt;sequence>
 *         &lt;element name="salesStatus" type="{http://www.w3.org/2001/XMLSchema}string"/>
 *         &lt;element name="overrideStatus" type="{http://www.w3.org/2001/XMLSchema}string"/>
 *         &lt;element name="isPrimary" type="{http://www.w3.org/2001/XMLSchema}boolean"/>
 *       &lt;/sequence>
 *     &lt;/restriction>
 *   &lt;/complexContent>
 * &lt;/complexType>
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "BeamSalesInfo", propOrder = {
    "salesStatus",
    "overrideStatus",
    "isPrimary"
})
public class BeamSalesInfo
    implements Cloneable, CopyTo, Equals, HashCode, ToString
{

    @XmlElement(required = true)
    protected String salesStatus;
    @XmlElement(required = true)
    protected String overrideStatus;
    protected boolean isPrimary;

    /**
     * Gets the value of the salesStatus property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getSalesStatus() {
        return salesStatus;
    }

    /**
     * Sets the value of the salesStatus property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setSalesStatus(String value) {
        this.salesStatus = value;
    }

    /**
     * Gets the value of the overrideStatus property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getOverrideStatus() {
        return overrideStatus;
    }

    /**
     * Sets the value of the overrideStatus property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setOverrideStatus(String value) {
        this.overrideStatus = value;
    }

    /**
     * Gets the value of the isPrimary property.
     * 
     */
    public boolean isIsPrimary() {
        return isPrimary;
    }

    /**
     * Sets the value of the isPrimary property.
     * 
     */
    public void setIsPrimary(boolean value) {
        this.isPrimary = value;
    }

    public String toString() {
        final ToStringStrategy strategy = JAXBToStringStrategy.INSTANCE;
        final StringBuilder buffer = new StringBuilder();
        append(null, buffer, strategy);
        return buffer.toString();
    }

    public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
        strategy.appendStart(locator, this, buffer);
        appendFields(locator, buffer, strategy);
        strategy.appendEnd(locator, this, buffer);
        return buffer;
    }

    public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
        {
            String theSalesStatus;
            theSalesStatus = this.getSalesStatus();
            strategy.appendField(locator, this, "salesStatus", buffer, theSalesStatus);
        }
        {
            String theOverrideStatus;
            theOverrideStatus = this.getOverrideStatus();
            strategy.appendField(locator, this, "overrideStatus", buffer, theOverrideStatus);
        }
        {
            boolean theIsPrimary;
            theIsPrimary = this.isIsPrimary();
            strategy.appendField(locator, this, "isPrimary", buffer, theIsPrimary);
        }
        return buffer;
    }

    public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
        if (!(object instanceof BeamSalesInfo)) {
            return false;
        }
        if (this == object) {
            return true;
        }
        final BeamSalesInfo that = ((BeamSalesInfo) object);
        {
            String lhsSalesStatus;
            lhsSalesStatus = this.getSalesStatus();
            String rhsSalesStatus;
            rhsSalesStatus = that.getSalesStatus();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "salesStatus", lhsSalesStatus), LocatorUtils.property(thatLocator, "salesStatus", rhsSalesStatus), lhsSalesStatus, rhsSalesStatus)) {
                return false;
            }
        }
        {
            String lhsOverrideStatus;
            lhsOverrideStatus = this.getOverrideStatus();
            String rhsOverrideStatus;
            rhsOverrideStatus = that.getOverrideStatus();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "overrideStatus", lhsOverrideStatus), LocatorUtils.property(thatLocator, "overrideStatus", rhsOverrideStatus), lhsOverrideStatus, rhsOverrideStatus)) {
                return false;
            }
        }
        {
            boolean lhsIsPrimary;
            lhsIsPrimary = this.isIsPrimary();
            boolean rhsIsPrimary;
            rhsIsPrimary = that.isIsPrimary();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "isPrimary", lhsIsPrimary), LocatorUtils.property(thatLocator, "isPrimary", rhsIsPrimary), lhsIsPrimary, rhsIsPrimary)) {
                return false;
            }
        }
        return true;
    }

    public boolean equals(Object object) {
        final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
        return equals(null, null, object, strategy);
    }

    public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
        int currentHashCode = 1;
        {
            String theSalesStatus;
            theSalesStatus = this.getSalesStatus();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "salesStatus", theSalesStatus), currentHashCode, theSalesStatus);
        }
        {
            String theOverrideStatus;
            theOverrideStatus = this.getOverrideStatus();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "overrideStatus", theOverrideStatus), currentHashCode, theOverrideStatus);
        }
        {
            boolean theIsPrimary;
            theIsPrimary = this.isIsPrimary();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "isPrimary", theIsPrimary), currentHashCode, theIsPrimary);
        }
        return currentHashCode;
    }

    public int hashCode() {
        final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
        return this.hashCode(null, strategy);
    }

    public Object clone() {
        return copyTo(createNewInstance());
    }

    public Object copyTo(Object target) {
        final CopyStrategy strategy = JAXBCopyStrategy.INSTANCE;
        return copyTo(null, target, strategy);
    }

    public Object copyTo(ObjectLocator locator, Object target, CopyStrategy strategy) {
        final Object draftCopy = ((target == null)?createNewInstance():target);
        if (draftCopy instanceof BeamSalesInfo) {
            final BeamSalesInfo copy = ((BeamSalesInfo) draftCopy);
            if (this.salesStatus!= null) {
                String sourceSalesStatus;
                sourceSalesStatus = this.getSalesStatus();
                String copySalesStatus = ((String) strategy.copy(LocatorUtils.property(locator, "salesStatus", sourceSalesStatus), sourceSalesStatus));
                copy.setSalesStatus(copySalesStatus);
            } else {
                copy.salesStatus = null;
            }
            if (this.overrideStatus!= null) {
                String sourceOverrideStatus;
                sourceOverrideStatus = this.getOverrideStatus();
                String copyOverrideStatus = ((String) strategy.copy(LocatorUtils.property(locator, "overrideStatus", sourceOverrideStatus), sourceOverrideStatus));
                copy.setOverrideStatus(copyOverrideStatus);
            } else {
                copy.overrideStatus = null;
            }
            boolean sourceIsPrimary;
            sourceIsPrimary = this.isIsPrimary();
            boolean copyIsPrimary = strategy.copy(LocatorUtils.property(locator, "isPrimary", sourceIsPrimary), sourceIsPrimary);
            copy.setIsPrimary(copyIsPrimary);
        }
        return draftCopy;
    }

    public Object createNewInstance() {
        return new BeamSalesInfo();
    }

}
