//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, vhudson-jaxb-ri-2.1-2 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2018.12.25 at 01:06:37 PM MST 
//


package com.viasat.wildblue.common.commondata;

import java.util.Date;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlSchemaType;
import javax.xml.bind.annotation.XmlType;
import javax.xml.bind.annotation.adapters.XmlJavaTypeAdapter;
import com.viasat.commonxsd.adapter.XmlDateToJavaDate;
import org.jvnet.jaxb2_commons.lang.CopyStrategy;
import org.jvnet.jaxb2_commons.lang.CopyTo;
import org.jvnet.jaxb2_commons.lang.Equals;
import org.jvnet.jaxb2_commons.lang.EqualsStrategy;
import org.jvnet.jaxb2_commons.lang.HashCode;
import org.jvnet.jaxb2_commons.lang.HashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBCopyStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBEqualsStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBHashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBToStringStrategy;
import org.jvnet.jaxb2_commons.lang.ToString;
import org.jvnet.jaxb2_commons.lang.ToStringStrategy;
import org.jvnet.jaxb2_commons.locator.ObjectLocator;
import org.jvnet.jaxb2_commons.locator.util.LocatorUtils;


/**
 * <p>Java class for ContactWithDateOfBirth complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="ContactWithDateOfBirth">
 *   &lt;complexContent>
 *     &lt;extension base="{http://www.wildblue.viasat.com/XMLSchema/v3.0/CommonData}Contact">
 *       &lt;sequence>
 *         &lt;element name="dateOfBirth" type="{http://www.w3.org/2001/XMLSchema}date" minOccurs="0"/>
 *       &lt;/sequence>
 *     &lt;/extension>
 *   &lt;/complexContent>
 * &lt;/complexType>
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "ContactWithDateOfBirth", propOrder = {
    "dateOfBirth"
})
public class ContactWithDateOfBirth
    extends Contact
    implements Cloneable, CopyTo, Equals, HashCode, ToString
{

    @XmlElement(type = String.class, nillable = true)
    @XmlJavaTypeAdapter(XmlDateToJavaDate.class)
    @XmlSchemaType(name = "date")
    protected Date dateOfBirth;

    /**
     * Gets the value of the dateOfBirth property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public Date getDateOfBirth() {
        return dateOfBirth;
    }

    /**
     * Sets the value of the dateOfBirth property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setDateOfBirth(Date value) {
        this.dateOfBirth = value;
    }

    public String toString() {
        final ToStringStrategy strategy = JAXBToStringStrategy.INSTANCE;
        final StringBuilder buffer = new StringBuilder();
        append(null, buffer, strategy);
        return buffer.toString();
    }

    public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
        strategy.appendStart(locator, this, buffer);
        appendFields(locator, buffer, strategy);
        strategy.appendEnd(locator, this, buffer);
        return buffer;
    }

    public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
        super.appendFields(locator, buffer, strategy);
        {
            Date theDateOfBirth;
            theDateOfBirth = this.getDateOfBirth();
            strategy.appendField(locator, this, "dateOfBirth", buffer, theDateOfBirth);
        }
        return buffer;
    }

    public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
        if (!(object instanceof ContactWithDateOfBirth)) {
            return false;
        }
        if (this == object) {
            return true;
        }
        if (!super.equals(thisLocator, thatLocator, object, strategy)) {
            return false;
        }
        final ContactWithDateOfBirth that = ((ContactWithDateOfBirth) object);
        {
            Date lhsDateOfBirth;
            lhsDateOfBirth = this.getDateOfBirth();
            Date rhsDateOfBirth;
            rhsDateOfBirth = that.getDateOfBirth();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "dateOfBirth", lhsDateOfBirth), LocatorUtils.property(thatLocator, "dateOfBirth", rhsDateOfBirth), lhsDateOfBirth, rhsDateOfBirth)) {
                return false;
            }
        }
        return true;
    }

    public boolean equals(Object object) {
        final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
        return equals(null, null, object, strategy);
    }

    public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
        int currentHashCode = super.hashCode(locator, strategy);
        {
            Date theDateOfBirth;
            theDateOfBirth = this.getDateOfBirth();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "dateOfBirth", theDateOfBirth), currentHashCode, theDateOfBirth);
        }
        return currentHashCode;
    }

    public int hashCode() {
        final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
        return this.hashCode(null, strategy);
    }

    public Object clone() {
        return copyTo(createNewInstance());
    }

    public Object copyTo(Object target) {
        final CopyStrategy strategy = JAXBCopyStrategy.INSTANCE;
        return copyTo(null, target, strategy);
    }

    public Object copyTo(ObjectLocator locator, Object target, CopyStrategy strategy) {
        final Object draftCopy = ((target == null)?createNewInstance():target);
        super.copyTo(locator, draftCopy, strategy);
        if (draftCopy instanceof ContactWithDateOfBirth) {
            final ContactWithDateOfBirth copy = ((ContactWithDateOfBirth) draftCopy);
            if (this.dateOfBirth!= null) {
                Date sourceDateOfBirth;
                sourceDateOfBirth = this.getDateOfBirth();
                Date copyDateOfBirth = ((Date) strategy.copy(LocatorUtils.property(locator, "dateOfBirth", sourceDateOfBirth), sourceDateOfBirth));
                copy.setDateOfBirth(copyDateOfBirth);
            } else {
                copy.dateOfBirth = null;
            }
        }
        return draftCopy;
    }

    public Object createNewInstance() {
        return new ContactWithDateOfBirth();
    }

}
